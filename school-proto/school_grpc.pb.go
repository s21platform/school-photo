// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: school.proto

package school_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchoolService_Login_FullMethodName                 = "/SchoolService/Login"
	SchoolService_GetTribesByCampusUuid_FullMethodName = "/SchoolService/GetTribesByCampusUuid"
)

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Этот сервис предоставляет методы для запросов на школьную платформу.
type SchoolServiceClient interface {
	// Метод для получения токена sberclass, которым будут подписаны запросы к платформе
	Login(ctx context.Context, in *SchoolLoginRequest, opts ...grpc.CallOption) (*SchoolLoginResponse, error)
	GetTribesByCampusUuid(ctx context.Context, in *CampusUuidIn, opts ...grpc.CallOption) (*TribesOut, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) Login(ctx context.Context, in *SchoolLoginRequest, opts ...grpc.CallOption) (*SchoolLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchoolLoginResponse)
	err := c.cc.Invoke(ctx, SchoolService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetTribesByCampusUuid(ctx context.Context, in *CampusUuidIn, opts ...grpc.CallOption) (*TribesOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TribesOut)
	err := c.cc.Invoke(ctx, SchoolService_GetTribesByCampusUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility.
//
// Этот сервис предоставляет методы для запросов на школьную платформу.
type SchoolServiceServer interface {
	// Метод для получения токена sberclass, которым будут подписаны запросы к платформе
	Login(context.Context, *SchoolLoginRequest) (*SchoolLoginResponse, error)
	GetTribesByCampusUuid(context.Context, *CampusUuidIn) (*TribesOut, error)
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchoolServiceServer struct{}

func (UnimplementedSchoolServiceServer) Login(context.Context, *SchoolLoginRequest) (*SchoolLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSchoolServiceServer) GetTribesByCampusUuid(context.Context, *CampusUuidIn) (*TribesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribesByCampusUuid not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}
func (UnimplementedSchoolServiceServer) testEmbeddedByValue()                       {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).Login(ctx, req.(*SchoolLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetTribesByCampusUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampusUuidIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetTribesByCampusUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetTribesByCampusUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetTribesByCampusUuid(ctx, req.(*CampusUuidIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SchoolService_Login_Handler,
		},
		{
			MethodName: "GetTribesByCampusUuid",
			Handler:    _SchoolService_GetTribesByCampusUuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school.proto",
}
